syntax enable
set nocompatible
nore ; :
nore : ;
set encoding=utf-8
set fileencoding=utf-8
set relativenumber
set number
set hidden
set ignorecase smartcase
" remove search highlight
set hlsearch
set incsearch
nore ^ 0
nore 0 ^
nnoremap x "_x
vnoremap x "_x
inoremap <s-Tab> <c-d>
set laststatus=2
cnore <c-b> <c-a>
cnore <c-a> <c-b>

cabbr <expr> %% expand('%:p:h')

command! -nargs=0 Spellcheck setlocal spell spelllang=en_us

nnoremap <up> <c-y>
nnoremap <down> <c-e>
nnoremap  <silent>   <tab>  :bnext<CR>
nnoremap <silent> <s-tab> :bprevious<CR>
set tabstop=4    "Number of spaces that a <Tab> in the file counts for"
set expandtab
set shiftwidth=4
set textwidth=0
set wrapmargin=0
set formatoptions-=t
set autoindent

set statusline=\ %f%m%r%h%w\ %=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y}%)\ %([%l,%v][%p%%]\ %)

let mapleader=' '

vmap <tab> >gv
vmap <s-tab> <gv
imap <S-tab> <C-d>
nnoremap <silent> <leader>n :noh<CR>
nnoremap x "_x
nnoremap X "_X
vnoremap x "_x
vnoremap X "_X

set wrap linebreak nolist
"j/k enter wrapped lines
nnoremap j gj
nnoremap k gk
" Jump to line 42 with 42G
:nnoremap <CR> G

vnoremap j gj
vnoremap k gk
" ctrl+j breaks line
nnoremap <c-j> a<CR><Esc>k$ 

filetype plugin on " FIXME doesn't work with ftplugin/gitcommit.vim
autocmd BufNewFile,BufRead COMMIT_EDITMSG setlocal spell " alternative
autocmd BufRead,BufNewFile *.hsc set filetype=haskell
autocmd BufRead,BufNewFile *.h   set syntax=c
autocmd FileType make setlocal noexpandtab
colors solarized


" This is taken from https://github.com/bogado/file-line/blob/master/plugin/file_line.vim
"
" Avoid installing twice or when in unsupported Vim version.
if exists('g:loaded_file_line') || (v:version < 701)
	finish
endif
let g:loaded_file_line = 1

" below regexp will separate filename and line/column number
" possible inputs to get to line 10 (and column 99) in code.cc are:
" * code.cc(10)
" * code.cc(10:99)
" * code.cc:10
" * code.cc:10:99
"
" closing braces/colons are ignored, so also acceptable are:
" * code.cc(10
" * code.cc:10:
let s:regexpressions = [ '\(.\{-1,}\)[(:]\(\d\+\)\%(:\(\d\+\):\?\)\?' ]

function! s:reopenAndGotoLine(file_name, line_num, col_num)
	if !filereadable(a:file_name)
		return
	endif

	let l:bufn = bufnr("%")

	exec "keepalt edit " . fnameescape(a:file_name)
	exec a:line_num
	exec "normal! " . a:col_num . '|'
	if foldlevel(a:line_num) > 0
		exec "normal! zv"
	endif
	exec "normal! zz"

	exec "bwipeout " l:bufn
	exec "filetype detect"
endfunction

function! s:gotoline()
	let file = bufname("%")

	" :e command calls BufRead even though the file is a new one.
	" As a workaround Jonas Pfenniger<jonas@pfenniger.name> added an
	" AutoCmd BufRead, this will test if this file actually exists before
	" searching for a file and line to goto.
	if (filereadable(file) || file == '')
		return file
	endif

	let l:names = []
	for regexp in s:regexpressions
		let l:names =  matchlist(file, regexp)

		if ! empty(l:names)
			let file_name = l:names[1]
			let line_num  = l:names[2] == ''? '0' : l:names[2]
			let  col_num  = l:names[3] == ''? '0' : l:names[3]
			call s:reopenAndGotoLine(file_name, line_num, col_num)
			return file_name
		endif
	endfor
	return file
endfunction

" Handle entry in the argument list.
" This is called via `:argdo` when entering Vim.
function! s:handle_arg()
	let argname = expand('%')
	let fname = s:gotoline()
	if fname != argname
		let argidx = argidx()
		exec (argidx+1).'argdelete'
		exec (argidx)'argadd' fnameescape(fname)
	endif
endfunction

function! s:startup()
	autocmd BufNewFile * nested call s:gotoline()
	autocmd BufRead * nested call s:gotoline()

	if argc() > 0
		let argidx=argidx()
		silent call s:handle_arg()
		exec (argidx+1).'argument'
		" Manually call Syntax autocommands, ignored by `:argdo`.
		doautocmd Syntax
		doautocmd FileType
	endif
endfunction

if !isdirectory(expand("%:p"))
	autocmd VimEnter * call s:startup()
endif
